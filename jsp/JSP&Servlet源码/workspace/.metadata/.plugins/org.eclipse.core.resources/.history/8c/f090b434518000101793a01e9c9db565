package cc.openhome.model;

import java.util.*;
import java.io.*;

public class UserService2 {
    private String USERS;
    private LinkedList<Blah> newest = new LinkedList<Blah>();
    private AccountDAO accountDAO;
    private BlahDAO messageDAO;
    
    public UserService2(String USERS) {
        this(new AccountDAOImpl(USERS));
        this.USERS = USERS;
    }
    
    public UserService2(AccountDAO userDAO) {
        this.accountDAO = userDAO;
    }

    public boolean isUserExisted(Account account) {
        return accountDAO.isUserExisted(account);
    }
    
    public void add(Account account) {
        accountDAO.add(account);
    }

    public boolean checkLogin(Account account) throws IOException {
        if (account.getName() != null && account.getPassword() != null) {
            Account storedAcct = accountDAO.get(account); 
            return storedAcct != null && 
                   storedAcct.getPassword().equals(account.getPassword()); 
        }
        return false;
    }
    
    private class TxtFilenameFilter implements FilenameFilter {
        @Override 
        public boolean accept(File dir, String name) {
            return name.endsWith(".txt");
        }
    }
    
    private TxtFilenameFilter filenameFilter = new TxtFilenameFilter();
    
    private class DateComparator implements Comparator<Date> {
        @Override
        public int compare(Date d1, Date d2) {
            return -d1.compareTo(d2);
        }
    }
    
    private DateComparator comparator = new DateComparator();
    
    public List<Blah> getBlahs(Blah blah) throws IOException {
        Map<Date, String> messages = new TreeMap<Date, String>(comparator); 
        for() {
            
        }
        
        
        File border = new File(USERS + "/" + blah.getUsername());
        String[] txts = border.list(filenameFilter);
        Map<Date, String> messages = new TreeMap<Date, String>(comparator);
        for(String txt : txts) {
            BufferedReader reader = new BufferedReader(
                    new InputStreamReader(
                            new FileInputStream(USERS + "/" + blah.getUsername() + "/" + txt), "UTF-8"));
            String text = null;
            StringBuilder builder = new StringBuilder();
            while((text = reader.readLine()) != null) {
                builder.append(text);
            }
            Date date = new Date(Long.parseLong(txt.substring(0, txt.indexOf(".txt"))));
            messages.put(date, builder.toString());
            reader.close();
        }
        
        List<Blah> blahs = new ArrayList<Blah>();
        
        for (Date date : messages.keySet()) {
            String txt = messages.get(date);
            blahs.add(new Blah(blah.getUsername(), date, txt));
        }
        
        return blahs;
    }
    
    public void addBlah(Blah blah) throws IOException {
        String file = USERS + "/" + blah.getUsername() + "/" + blah.getDate().getTime() + ".txt";
        BufferedWriter writer = new BufferedWriter(
                new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
        writer.write(blah.getTxt());
        writer.close();
        newest.addFirst(blah);
        if(newest.size() > 20) {
            newest.removeLast();
        }
    }
   
    public void deleteBlah(Blah blah) {
        File file = new File(USERS + "/" + blah.getUsername() + "/" + blah.getDate().getTime() + ".txt");
        if(file.exists()) {
            file.delete();
        }
        newest.remove(blah);
    }

    public List<Blah> getNewest() {
        return newest;
    }   
}
